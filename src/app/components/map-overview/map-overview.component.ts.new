// filepath: c:\Users\yassi\Link-Up\src\app\components\map-overview\map-overview.component.ts
import { Component, AfterViewInit, OnDestroy, Output, EventEmitter, signal } from "@angular/core";
import { CommonModule } from "@angular/common";
import * as L from "leaflet";

export interface Marker {
  lat: number;
  lng: number;
  title: string;
  description: string;
}

@Component({
  selector: "app-map",
  standalone: true,
  imports: [CommonModule],
  templateUrl: "./map-overview.component.html",
  styleUrls: ["./map-overview.component.css"],
})
export class MapOverviewComponent implements AfterViewInit, OnDestroy {
  private map?: L.Map;
  private markersData = signal<Marker[]>([
    { 
      lat: 49.4738333, 
      lng: 8.534333333333333, 
      title: "DHBW Mannheim", 
      description: "Hochschulstandort mit aktiven Studierendengruppen"
    },
    { 
      lat: 49.4878, 
      lng: 8.4660, 
      title: "Mannheim Treffpunkt", 
      description: "Wöchentliches Treffen für Kunstbegeisterte"
    },
    { 
      lat: 49.5038, 
      lng: 8.5240, 
      title: "Sportgruppe Neckarau", 
      description: "Outdoor-Fitness und Yoga im Park"
    },
  ]);
  
  @Output() markerClicked = new EventEmitter<string>();

  ngAfterViewInit(): void {
    this.initMap();
    this.addMarkers();

    // Bei Änderung der Fenstergröße Map neu berechnen
    window.addEventListener("resize", this.resizeMap.bind(this));
  }
  
  ngOnDestroy(): void {
    // Event-Listener für Fenstergröße entfernen
    window.removeEventListener('resize', this.resizeMap.bind(this));
    
    if (this.map) {
      this.map.off();
      this.map.remove();
    }
  }

  private initMap(): void {
    if (this.map) {
      return;
    }
    
    this.map = L.map("map", {
      center: [51.505, -0.09],
      zoom: 5,
    });
    
    // Wichtig: Karte invalidieren, damit sie sich an das Container-Element anpasst
    setTimeout(() => {
      if (this.map) {
        this.map.invalidateSize();
      }
    }, 100);

    //Limit map to germany
    const germanyBounds = L.latLngBounds(
      L.latLng(47.2701, 5.8663), // Southwest corner
      L.latLng(55.0992, 15.0419) // Northeast corner
    );

    this.map.setMaxBounds(germanyBounds);
    this.map.on("drag", () => {
      this.map?.panInsideBounds(germanyBounds, { animate: true });
    });
    this.map.options.minZoom = 5;

    L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
      maxZoom: 19,
      attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    }).addTo(this.map);
  }

  private addMarkers(): void {
    if (!this.map) {
      return;
    }

    const customIcon = L.icon({
      iconUrl: "assets/marker-icon-2x.png",
      iconSize: [26, 35],
      iconAnchor: [13, 35],
      popupAnchor: [1, -34],
      shadowUrl: "assets/marker-shadow.png",
      shadowSize: [41, 41],
    });

    this.markersData().forEach((marker) => {
      const popupContent = `
        <div class="marker-popup">
          <h3>${marker.title}</h3>
          <p>${marker.description}</p>
          <button class="btn-details" data-marker-title="${marker.title}">Details anzeigen</button>
        </div>
      `;
      
      L.marker([marker.lat, marker.lng], { icon: customIcon })
        .addTo(this.map!)
        .bindPopup(popupContent)
        .on("popupopen", (e) => {
          const popup = e.popup;
          const container = popup.getElement();
          if (container) {
            const button = container.querySelector(".btn-details");
            if (button) {
              button.addEventListener("click", () => {
                const title = button.getAttribute("data-marker-title");
                this.markerClicked.emit(title);
                console.log(`Marker clicked: ${title}`);
              });
            }
          }
        });
    });
  }

  public getMarkers(): Marker[] {
    return this.markersData();
  }
  
  private resizeMap(): void {
    if (this.map) {
      this.map.invalidateSize();
    }
  }
}
